{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","inputImage","setInputImage","_useState3","_useState4","croppedImage","setCroppedImage","React","createElement","type","accept","onChange","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","Fragment","src","alt","onClick","img","Image","canvas","document","ctx","getContext","width","height","drawImage","imageData","getImageData","top","bottom","left","right","y","x","index","data","croppedCanvas","croppedCtx","croppedWidth","croppedHeight","toDataURL","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"wKAyFeA,MAvFf,WAAe,IAAAC,EACuBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA3CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACQL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAA/CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAgEpC,OACEG,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SAAOC,KAAK,OAAOC,OAAO,UAAUC,SAhEd,SAACC,GACzB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAC1BC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdhB,EAAcc,EAAOG,SAEvBH,EAAOI,cAAcP,MA2DlBZ,GACCM,IAAAC,cAAAD,IAAAc,SAAA,KACEd,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,OAAKc,IAAKrB,EAAYsB,IAAI,UAC1BhB,IAAAC,cAAA,UAAQgB,QA3DQ,WAEtB,IAAMC,EAAM,IAAIC,MAGhBD,EAAIH,IAAMrB,EAGV,IAAM0B,EAASC,SAASpB,cAAc,UAChCqB,EAAMF,EAAOG,WAAW,MAG9BH,EAAOI,MAAQN,EAAIM,MACnBJ,EAAOK,OAASP,EAAIO,OAGpBH,EAAII,UAAUR,EAAK,EAAG,GAWtB,IARA,IAAMS,EAAYL,EAAIM,aAAa,EAAG,EAAGR,EAAOI,MAAOJ,EAAOK,QAG1DI,EAAMF,EAAUF,OAChBK,EAAS,EACTC,EAAOJ,EAAUH,MACjBQ,EAAQ,EAEHC,EAAI,EAAGA,EAAIN,EAAUF,OAAQQ,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAUH,MAAOU,IAAK,CACxC,IAAMC,EAAoC,GAA3BF,EAAIN,EAAUH,MAAQU,GACvBP,EAAUS,KAAKD,EAAQ,GACzB,IACNF,EAAIJ,IAAKA,EAAMI,GACfA,EAAIH,IAAQA,EAASG,GACrBC,EAAIH,IAAMA,EAAOG,GACjBA,EAAIF,IAAOA,EAAQE,IAM7B,IAAMG,EAAgBhB,SAASpB,cAAc,UACvCqC,EAAaD,EAAcd,WAAW,MACtCgB,EAAeP,EAAQD,EAAO,EAC9BS,EAAgBV,EAASD,EAAM,EACrCQ,EAAcb,MAAQe,EACtBF,EAAcZ,OAASe,EACvBF,EAAWZ,UAAUN,EAAQW,EAAMF,EAAKU,EAAcC,EAAe,EAAG,EAAGD,EAAcC,GACzFzC,EAAgBsC,EAAcI,eAWU,eAGrC3C,GACCE,IAAAC,cAAAD,IAAAc,SAAA,KACEd,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,OAAKc,IAAKjB,EAAckB,IAAI,eCtEvB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWnC,SAASoC,eAAe,SACpDC,OACH1D,IAAAC,cAACD,IAAM2D,WAAU,KACf3D,IAAAC,cAACZ,EAAG,QAORqD","file":"static/js/main.ac1c251b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [inputImage, setInputImage] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n\n  // Function to handle image upload\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setInputImage(reader.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Function to handle image cropping\n  const handleImageCrop = () => {\n    // Create a new image element\n    const img = new Image();\n\n    // Set the src of the image element to the input image\n    img.src = inputImage;\n\n    // Create a canvas element\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set the width and height of the canvas to the image width and height\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image on the canvas\n    ctx.drawImage(img, 0, 0);\n\n    // Get the pixel data from the canvas\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n    // Find the edges of the non-transparent part of the image\n    let top = imageData.height,\n        bottom = 0,\n        left = imageData.width,\n        right = 0;\n\n    for (let y = 0; y < imageData.height; y++) {\n      for (let x = 0; x < imageData.width; x++) {\n        const index = (y * imageData.width + x) * 4;\n        const alpha = imageData.data[index + 3];\n        if (alpha > 0) {\n          if (y < top) top = y;\n          if (y > bottom) bottom = y;\n          if (x < left) left = x;\n          if (x > right) right = x;\n        }\n      }\n    }\n\n    // Crop the image based on the edges\n    const croppedCanvas = document.createElement('canvas');\n    const croppedCtx = croppedCanvas.getContext('2d');\n    const croppedWidth = right - left + 1;\n    const croppedHeight = bottom - top + 1;\n    croppedCanvas.width = croppedWidth;\n    croppedCanvas.height = croppedHeight;\n    croppedCtx.drawImage(canvas, left, top, croppedWidth, croppedHeight, 0, 0, croppedWidth, croppedHeight);\n    setCroppedImage(croppedCanvas.toDataURL());\n  };\n\n  return (\n    <div>\n      <h2>Image Upload</h2>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      {inputImage && (\n        <>\n          <h2>Input Image:</h2>\n          <img src={inputImage} alt=\"Input\" />\n          <button onClick={handleImageCrop}>Crop Image</button>\n        </>\n      )}\n      {croppedImage && (\n        <>\n          <h2>Cropped Image:</h2>\n          <img src={croppedImage} alt=\"Cropped\" />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}